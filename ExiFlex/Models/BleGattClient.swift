//
//  BleGattClient.swift
//
//  BlueJinja Stub code for iOS
//  This code was generated by BlueJinja
//

import Foundation
import CoreBluetooth

class BleGattClient: NSObject, CBPeripheralDelegate {
    
    // MARK: All service UUIDs
    let serviceUuids = [BleServiceExpose.serviceUuid]
    
    // Services in profile
    let bleServiceExpose: BleServiceExpose
    private let delegateExpose: BleGattClientDelegate
    
    // MARK: - Init
    override init() {
        bleServiceExpose = BleServiceExpose()
        delegateExpose = bleServiceExpose
        super.init()
    }
    
    // On discover services (Implemented exclusively for one service)
    func peripheral(_ peripheral: CBPeripheral, didDiscoverServices error: Error?) {
        if error == nil {
            if let services = peripheral.services {
                for service in services {
                    // Distribute the service
                    if service.uuid == BleServiceExpose.serviceUuid {
                        delegateExpose.peripheral(peripheral, didDiscoverService: service, error: error)
                    } else {
                        
                    }
                }
            }
        } else {
        }
    }
    
    // On discover characteristics of servise
    func peripheral(_ peripheral: CBPeripheral, didDiscoverCharacteristicsFor service: CBService, error: Error?) {
        if error == nil {
            // Distribute the service
            if service.uuid == BleServiceExpose.serviceUuid {
                delegateExpose.peripheral(peripheral, didDiscoverCharacteristicsFor: service, error: error)
            } else {
                
            }
        } else {
        }
    }
    
    // On notify from characteristic
    func peripheral(_ peripheral: CBPeripheral, didUpdateValueFor characteristic: CBCharacteristic, error: Error?) {
        if error == nil {
            if let service = characteristic.service {
                // Distribute the service
                if service.uuid == BleServiceExpose.serviceUuid {
                    delegateExpose.peripheral(peripheral, didUpdateValueFor: characteristic, error: error)
                } else {
                    
                }
            }
        } else {
        }
    }
    
}
